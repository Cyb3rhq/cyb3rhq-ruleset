#!/bin/bash
# Smalll helper script wich get the latest oval/xccdf CVE definitions from RedHat and SUSE
# It converts these files to an xccdf File with an default profile.

ovalfiles=( ftp://ftp.suse.com/pub/projects/security/oval/suse.linux.enterprise.server.12-patch.xml ftp://ftp.suse.com/pub/projects/security/oval/suse.linux.enterprise.server.11-patch.xml https://www.redhat.com/security/data/metrics/ds/com.redhat.rhsa-RHEL6.ds.xml https://www.redhat.com/security/data/metrics/ds/com.redhat.rhsa-RHEL7.ds.xml )

for ovalget in "${ovalfiles[@]}"; do
   echo "Get CVE-file ${ovalget}" 
   /usr/bin/curl -s -O ${ovalget}
done

for ovalget in "${ovalfiles[@]}"; do
   ovalget=${ovalget##*/}
   if [ -f ${ovalget} ];then
      echo "Working on ${ovalget}...."
      if [ "${ovalget}" == "com.redhat.rhsa-RHEL6.ds.xml" ];then
         outxml="cve-redhat-6-ds.xml"
         mv ${ovalget} ${outxml}
         /usr/bin/sed -i 's/<Rule selected="true" id=/<Rule selected="false" id=/g' ${outxml}

         splitline=`grep -n "None, generated from OVAL file.</version>" ${outxml} | awk '{print $1};'`
         splitline=${splitline%:}
         let "splitline+=1"
         rules=`/usr/bin/grep '<Rule selected="false" id=' ${outxml}`
         echo '<Profile id="xccdf_com.redhat.rhsa_profile_cve-rhel-6">'> ${outxml}_pro
         echo '   <title xml:lang="en-US">CVE RHEL 6 Profile</title>'>> ${outxml}_pro
         echo '   <description xml:lang="en-US">This profile contains rules to ensure alle CVE cheks for RHEL 6.</description>'>> ${outxml}_pro
         for i in `echo $rules`; do
            if [ "${i:0:3}" == "id=" ];then
               i=${i:3}
               echo "   <select idref=$i selected=\"true\"/>">> ${outxml}_pro
            fi
         done
         echo '</Profile>'>> ${outxml}_pro

         /usr/bin/csplit ${outxml} $splitline -f ${outxml}
         cat ${outxml}00 ${outxml}_pro ${outxml}01 > ${outxml}
         rm -f ${outxml}00 ${outxml}01 ${outxml}_pro
      fi
      if [ "${ovalget}" == "com.redhat.rhsa-RHEL7.ds.xml" ];then
         outxml="cve-redhat-7-ds.xml"
         mv ${ovalget} ${outxml}
         /usr/bin/sed -i 's/<Rule selected="true" id=/<Rule selected="false" id=/g' ${outxml}

         splitline=`grep -n "None, generated from OVAL file.</version>" ${outxml} | awk '{print $1};'`
         splitline=${splitline%:}
         let "splitline+=1"
         rules=`/usr/bin/grep '<Rule selected="false" id=' ${outxml}`
         echo '<Profile id="xccdf_com.redhat.rhsa_profile_cve-rhel-7">'> ${outxml}_pro
         echo '   <title xml:lang="en-US">CVE RHEL 7 Profile</title>'>> ${outxml}_pro
         echo '   <description xml:lang="en-US">This profile contains rules to ensure alle CVE cheks for RHEL 7.</description>'>> ${outxml}_pro
         for i in `echo $rules`; do
            if [ "${i:0:3}" == "id=" ];then
               i=${i:3}
               echo "   <select idref=$i selected=\"true\"/>">> ${outxml}_pro
            fi
         done
         echo '</Profile>'>> ${outxml}_pro

         /usr/bin/csplit ${outxml} $splitline -f ${outxml}
         cat ${outxml}00 ${outxml}_pro ${outxml}01 > ${outxml}
         rm -f ${outxml}00 ${outxml}01 ${outxml}_pro
      fi
      if [ "${ovalget}" == "suse.linux.enterprise.server.11-patch.xml" ];then
         outxml="cve-sles-11-ds.xml"
         /usr/bin/xsltproc --stringparam ovalfile ${ovalget} oval-to-xccdf.xslt ${ovalget} | xmllint --format - > tmp.xccdf11.xml
         /usr/bin/xsltproc --stringparam reverse_DNS org.opensuse xccdf_1.1_to_1.2.xsl tmp.xccdf11.xml > tmp.xccdf12.xml
         /usr/bin/oscap ds sds-compose tmp.xccdf12.xml  ${outxml}

         splitline=`grep -n "None, generated from OVAL file.</version>" ${outxml} | awk '{print $1};'`
         splitline=${splitline%:}
         let "splitline+=1"
         rules=`/usr/bin/grep '<Rule selected="false" id=' tmp.xccdf12.xml`
         echo '<Profile id="xccdf_org.opensuse_profile_cve-sles-11">'> ${outxml}_pro
         echo '   <title xml:lang="en-US">CVE SLES 11 Profile</title>'>> ${outxml}_pro
         echo '   <description xml:lang="en-US">This profile contains rules to ensure alle CVE cheks for SLES 11.</description>'>> ${outxml}_pro
         for i in `echo $rules`; do
            if [ "${i:0:3}" == "id=" ];then
               i=${i:3}
               echo "   <select idref=$i selected=\"true\"/>">> ${outxml}_pro
            fi
         done
         echo '</Profile>'>> ${outxml}_pro

         /usr/bin/csplit ${outxml} $splitline -f ${outxml}
         cat ${outxml}00 ${outxml}_pro ${outxml}01 > ${outxml}

         rm -f ${ovalget}
         rm -f tmp.xccdf11.xml
         rm -f tmp.xccdf12.xml
         rm -f ${outxml}00 ${outxml}01 ${outxml}_pro
      fi
      if [ "${ovalget}" == "suse.linux.enterprise.server.12-patch.xml" ];then

         outxml="cve-sles-12-ds.xml"
         /usr/bin/xsltproc --stringparam ovalfile ${ovalget} oval-to-xccdf.xslt ${ovalget} | xmllint --format - > tmp.xccdf11.xml
         /usr/bin/xsltproc --stringparam reverse_DNS org.opensuse xccdf_1.1_to_1.2.xsl tmp.xccdf11.xml > tmp.xccdf12.xml
         /usr/bin/oscap ds sds-compose tmp.xccdf12.xml  ${outxml}

         splitline=`grep -n "None, generated from OVAL file.</version>" ${outxml} | awk '{print $1};'`
         splitline=${splitline%:}
         let "splitline+=1"
         rules=`/usr/bin/grep '<Rule selected="false" id=' tmp.xccdf12.xml`
         echo '<Profile id="xccdf_org.opensuse_profile_cve-sles-12">'> ${outxml}_pro
         echo '   <title xml:lang="en-US">CVE SLES 12 Profile</title>'>> ${outxml}_pro
         echo '   <description xml:lang="en-US">This profile contains rules to ensure alle CVE cheks for SLES 12.</description>'>> ${outxml}_pro
         for i in `echo $rules`; do
            if [ "${i:0:3}" == "id=" ];then
               i=${i:3}
               echo "   <select idref=$i selected=\"true\"/>">> ${outxml}_pro
            fi
         done
         echo '</Profile>'>> ${outxml}_pro

         /usr/bin/csplit ${outxml} $splitline -f ${outxml}
         cat ${outxml}00 ${outxml}_pro ${outxml}01 > ${outxml}

         rm -f ${ovalget}
         rm -f tmp.xccdf11.xml
         rm -f tmp.xccdf12.xml
         rm -f ${outxml}00 ${outxml}01 ${outxml}_pro
      fi
   fi
done
